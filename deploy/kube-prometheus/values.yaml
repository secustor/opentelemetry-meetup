commonLabels:
  prometheus: kube-prometheus

grafana:
  ingress:
    enabled: true
    hosts:
      - grafana.testing.com

  additionalDataSources:
   - name: Loki
     uid: default_loki
     access: proxy
     editable: false
     orgId: 1
     type: loki
     url: http://loki:3100
     version: 1
     jsonData:
       maxLines: 1000
       derivedFields:
       # Field with internal link pointing to data source in Grafana.
       # Right now, Grafana supports only Jaeger and Zipkin data sources as link targets.
       # datasourceUid value can be anything, but it should be unique across all defined data source uids.
       - datasourceUid: default_temp
         matcherRegex: "traceID=(\\w+)"
         name: TraceID
         # url will be interpreted as query for the datasource
         url: '$${__value.raw}'
         urlDisplayLabel: TraceID
       - datasourceUid: default_temp
         matcherRegex: "traceid=(\\w+)"
         name: traceid
         # url will be interpreted as query for the datasource
         url: '$${__value.raw}'
         urlDisplayLabel: TraceID
       - datasourceUid: default_temp
         matcherRegex: '"traceID":"(\w+)"'
         name: TraceID_JSON
         # url will be interpreted as query for the datasource
         url: '$${__value.raw}'
         urlDisplayLabel: TraceID

   - name: Tempo
     access: proxy
     editable: false
     orgId: 1
     type: tempo
     url: http://tempo:3100
     version: 1
     uid: default_temp
     jsonData:
       nodeGraph:
         enabled: true
       tracesToLogs:
         datasourceUid: default_loki
#         tags:
#           - "k8s.namespace.name"
#           - "k8s.pod.name"
#         lokiSearch: true

  serviceMonitor:
    enabled: true
    additionalLabels:
      prometheus: kube-prometheus

# activate tracing of Grafana
  env:
    JAEGER_AGENT_PORT: 6831

  envValueFrom:
    JAEGER_AGENT_HOST:
      fieldRef:
        fieldPath: status.hostIP

prometheus:
  prometheusSpec:
    # define label to monitor external service monitor objects
    serviceMonitorSelector:
      matchLabels:
        prometheus: kube-prometheus
